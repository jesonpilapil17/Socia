// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums
enum TaskType {
  WATCH
  LIKE
  COMMENT
  UPLOAD
  FOLLOW
  CUSTOM
}

enum RedemptionStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  CANCELED
}

enum TransactionType {
  TASK_REWARD
  REDEMPTION
  ADJUSTMENT
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}

// Core models
model User {
  id               String   @id @default(cuid())
  email            String   @unique
  username         String   @unique
  passwordHash     String
  stripeAccountId  String?  // Stripe Connect Account for payouts

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  videos           Video[]
  likes            Like[]
  comments         Comment[]
  following        Follow[] @relation("UserFollowing")
  followers        Follow[] @relation("UserFollowers")
  bookmarks        Bookmark[]
  tasks            UserDailyTask[]
  transactions     TokenTransaction[]
  redemptions      Redemption[]
  sessions         Session[]
  notifications    Notification[]
}

model Video {
  id          String   @id @default(cuid())
  userId      String
  url         String
  title       String
  description String   @default("")
  isHidden    Boolean  @default(false)
  views       Int      @default(0)
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
  likes       Like[]
  comments    Comment[]
  bookmarks   Bookmark[]
  tags        VideoHashtag[]
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  videoId   String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])

  @@unique([userId, videoId])
}

// Bookmark saved videos
model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  videoId   String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])

  @@unique([userId, videoId])
  @@index([userId])
}

// Hashtags and join table for video-tag relations
model Hashtag {
  id        String         @id @default(cuid())
  tag       String         @unique
  createdAt DateTime       @default(now())
  videos    VideoHashtag[]
}

model VideoHashtag {
  id        String   @id @default(cuid())
  videoId   String
  hashtagId String

  video     Video    @relation(fields: [videoId], references: [id])
  hashtag   Hashtag  @relation(fields: [hashtagId], references: [id])

  @@unique([videoId, hashtagId])
  @@index([hashtagId])
}

// Basic content reports (placeholder)
model Report {
  id        String   @id @default(cuid())
  userId    String
  videoId   String
  reason    String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])
}

// Comments on videos
model Comment {
  id        String   @id @default(cuid())
  userId    String
  videoId   String
  content   String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])

  @@index([videoId, createdAt])
}

// Follow relationships between users
model Follow {
  id           String   @id @default(cuid())
  followerId   String
  followingId  String
  createdAt    DateTime @default(now())

  follower     User     @relation("UserFollowing", fields: [followerId], references: [id])
  following    User     @relation("UserFollowers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

// Template catalog of possible daily tasks
model DailyTaskTemplate {
  id            String   @id @default(cuid())
  code          String   @unique
  title         String
  description   String
  type          TaskType
  targetCount   Int      @default(1)
  rewardTokens  Int      @default(10)
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  assignments   UserDailyTask[]
}

// The per-user task assignment for a specific day (UTC start-of-day)
model UserDailyTask {
  id              String             @id @default(cuid())
  userId          String
  templateId      String
  assignedDate    DateTime           // Use UTC start-of-day to represent the task day
  progressCount   Int      @default(0)
  completedAt     DateTime?
  rewardTokens    Int      @default(10)
  createdAt       DateTime @default(now())

  user            User               @relation(fields: [userId], references: [id])
  template        DailyTaskTemplate  @relation(fields: [templateId], references: [id])
  // back relation to token transactions created by this task
  transactions    TokenTransaction[] @relation("TaskTransaction")

  @@index([userId, assignedDate])
  @@unique([userId, templateId, assignedDate])
}

// Token ledger entries; balance is sum(amount)
model TokenTransaction {
  id         String          @id @default(cuid())
  userId     String
  amount     Int             // positive: earn; negative: redeem
  type       TransactionType
  meta       Json?
  createdAt  DateTime        @default(now())

  user       User            @relation(fields: [userId], references: [id])
  // optional linkage to a completed task that generated this transaction
  taskId     String?
  task       UserDailyTask?  @relation("TaskTransaction", fields: [taskId], references: [id])

  // optional linkage to a redemption; one-to-one
  redemptionId String?       @unique
  redemption   Redemption?   @relation("RedemptionTransaction", fields: [redemptionId], references: [id])
}

model Redemption {
  id                String            @id @default(cuid())
  userId            String
  status            RedemptionStatus  @default(PENDING)
  tokens            Int               // tokens to redeem
  amountUsdCents    Int               // calculated from tokens
  stripeAccountId   String?
  stripeTransferId  String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  user              User              @relation(fields: [userId], references: [id])
  transaction       TokenTransaction? @relation("RedemptionTransaction")
}

model Notification {
  id         String            @id @default(cuid())
  userId     String            // recipient
  actorId    String            // who performed the action
  type       NotificationType
  videoId    String?
  commentId  String?
  readAt     DateTime?
  createdAt  DateTime          @default(now())

  user       User              @relation(fields: [userId], references: [id])
  actor      User              @relation("NotificationActor", fields: [actorId], references: [id])
}

// Stateful session tokens for simple auth
model Session {
  id         String   @id @default(cuid())
  userId     String
  tokenHash  String   @unique
  createdAt  DateTime @default(now())
  expiresAt  DateTime

  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
}
